{"version":3,"sources":["images/electricite.png","images/gaz.png","images/logo.svg","utils/reverseDate.tsx","components/MeterDataDisplayer.tsx","components/YearFilter.tsx","utils/getEnergyConsumption.tsx","components/GasDataLine.tsx","components/ElectricityDataLine.tsx","components/EnergyConsumption.tsx","components/EnergyContainer.tsx","components/EnergyToggleButton.tsx","utils/getEnergyPods.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","reverseDate","string","split","reverse","join","MeterDataDisplayer","meterTime","meterDate","energyType","label","className","id","src","gaz","alt","width","electricite","YearFilter","filterValue","setFilterValue","value","onChange","e","target","getEnergyConsumption","energyId","setGasConsumption","setElectricityConsumption","a","fetch","response","json","data","emptyArr","index","length","push","date","createdAt","substr","time","indexHigh","indexLow","GasDataLine","item","key","parseInt","ElectricityDataLine","EnergyConsumption","useState","gasConsumption","electricityConsumption","useEffect","filterGasByYear","filter","filterElectricityByYear","map","EnergyContainer","children","EnergyToggleButton","showClickedEnergy","setShowClickedEnergy","onClick","getEnergyPods","GAS_ID","ELECTRICITY_ID","setEnergyPod","setEnergyDate","podDatas","gasPod","pointOfDelivery","electricityPod","metersCreationDate","gasDate","gasTime","electricityDate","electricityTime","App","energyPod","energyDate","logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b5dad750.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/electricite.7de442ff.png\";","module.exports = __webpack_public_path__ + \"static/media/gaz.8d489ca6.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.d5df1da4.svg\";","export const reverseDate = (string: string): string => string.split('-').reverse().join('-')","import React from 'react';\nimport electricite from '../images/electricite.png';\nimport gaz from '../images/gaz.png';\nimport { reverseDate } from '../utils/reverseDate';\n\nconst MeterDataDisplayer = ({ meterTime, meterDate, energyType, label } : { meterTime: string, meterDate: string, energyType: string, label: string }) => (\n      \n      <div className=\"meters-data-div green\">\n            <h2>{label}</h2> \n                  {label === \"Gaz\" ? \n                        <img id=\"gas\"  src={gaz} alt=\"Logo Gaz\" width=\"40px\"/>\n                        :\n                        <img id=\"electricity\" src={electricite} alt=\"Logo Electricité\" width=\"40px\"/>\n                  }\n                  <div><strong>POD</strong> : {energyType}</div>\n                  <div><strong>Date de création</strong> : {reverseDate(meterDate)}</div>\n                  <div><strong>Heure de création</strong> : {meterTime}</div>\n            </div>\n      )\n\nexport default MeterDataDisplayer;","import React from 'react';\n\nconst YearFilter = ({filterValue, setFilterValue}\n: {filterValue: string, setFilterValue: React.Dispatch<React.SetStateAction<string>>}) => {\n      \n      const handleChange = (e: any) => {\n            setFilterValue(e.target.value);\n      }\n\n      return (\n            <div className=\"custom-select\" >\n                  <select className=\"select-selected\" value={filterValue} onChange={handleChange}>\n                        <option value=\"0\">Toute la consommation</option>\n                        <option value=\"2019\">2019</option>\n                        <option value=\"2020\">2020</option>\n                        <option value=\"2021\">2021</option>\n                  </select>\n            </div>\n      )\n}\n\nexport default YearFilter;","import { reverseDate } from './reverseDate';\n\ninterface gasConsumptionType {\n      id: string;\n      date: string;\n      time: string;\n      indexHigh : number;\n}\n\ninterface electricityConsumptionType {\n      id: string;\n      date: string;\n      time: string;\n      indexHigh : number;\n      indexLow: number;\n}\nexport const getEnergyConsumption = async (\nenergyId: number,  \nenergyType: string,\nsetGasConsumption: React.Dispatch<React.SetStateAction<gasConsumptionType[]>>, \nsetElectricityConsumption: React.Dispatch<React.SetStateAction<electricityConsumptionType[]>>) => {\n      const response = await fetch(`https://5e9ed3cdfb467500166c47bb.mockapi.io/api/v1/meter/${energyId}/${energyType}`);\n      const data = await response.json();\n      const emptyArr: any[] = [];\n\n      for (let index = 0; index < data.length; index++) {\n            if (energyId === 1) {\n                  emptyArr.push({\n                        id: data[index].id,\n                        date: reverseDate(data[index].createdAt.substr(0, 10)), // isoler la date dans la string fournie et retourner la string pour afficher la date au format français\n                        time: data[index].createdAt.substr(11, 8), //isoler l'heure dans la string fournie\n                        indexHigh: data[index].indexHigh\n                  })\n            } else {\n                  emptyArr.push({\n                        id: data[index].id,\n                        date: reverseDate(data[index].createdAt.substr(0, 10)), // isoler la date dans la string fournie\n                        time: data[index].createdAt.substr(11, 8), //isoler l'heure dans la string fournie\n                        indexHigh: data[index].indexHigh,\n                        indexLow: data[index].indexLow\n                  })\n            }\n      }\n      energyId === 1 ? \n      setGasConsumption(emptyArr) : \n      setElectricityConsumption(emptyArr)\n}","import React from 'react';\n\ninterface gasConsumptionType {\n      id: string;\n      date: string;\n      time: string;\n      indexHigh : number;\n}\n\nconst GasDataLine = ({ item } : { item: gasConsumptionType}) => (\n      <div key={item.id} className=\"array-line\">\n            {parseInt(item.date.substr(3, 2)) < 12 &&  parseInt(item.date.substr(0, 2)) < 31 ? \n                  <div className=\"block-line\">Le {item.date} à {item.time}</div> \n                  : <div className=\"block-line\">La date {item.date} n'est pas au bon format !</div>\n            }\n            <div className=\"block-line\">\n                  <div>Consommation</div>  \n                  <div>{item.indexHigh} kWh</div>\n            </div>\n      </div>\n)\n\nexport default GasDataLine;\n","import React from 'react';\n\ninterface electricityConsumptionType {\n      id: string;\n      date: string;\n      time: string;\n      indexHigh : number;\n      indexLow: number;\n}\n\nconst ElectricityDataLine = ({ item } : { item: electricityConsumptionType}) => (\n      <div key={item.id} className=\"array-line\">\n            {parseInt(item.date.substr(3, 2)) < 12 &&  parseInt(item.date.substr(0, 2)) < 31 ? \n                  <div className=\"block-line\">Le {item.date} à {item.time}</div> \n                  : <div className=\"block-line\">La date {item.date} n'est pas au bon format !</div>\n            }\n            <div className=\"block-line\">\n                  <div>Conso Heure Creuse</div> \n                  <div> {item.indexLow} kWh</div>\n            </div>\n            <div className=\"block-line\">\n                  <div>Conso Heure Pleine</div>  \n                  <div>{item.indexHigh} kWh</div>\n            </div>\n      </div>\n)\n\nexport default ElectricityDataLine;\n","import React, { useState, useEffect } from 'react';\nimport YearFilter from './YearFilter';\nimport { getEnergyConsumption } from '../utils/getEnergyConsumption';\nimport GasDataLine from './GasDataLine';\nimport ElectricityDataLine from './ElectricityDataLine';\n\n\nconst EnergyConsumption = ({ energyType, energyId } : { energyType: string, energyId: number }) => {\n\n      interface gasConsumptionType {\n            id: string;\n            date: string;\n            time: string;\n            indexHigh : number;\n      }\n\n      interface electricityConsumptionType {\n            id: string;\n            date: string;\n            time: string;\n            indexHigh : number;\n            indexLow: number;\n      }\n\n      const [ gasConsumption, setGasConsumption ] = useState<gasConsumptionType[]>([]);\n      const [ electricityConsumption, setElectricityConsumption ] = useState<electricityConsumptionType[]>([]);\n      const [ filterValue, setFilterValue ] = useState<string>(\"0\");\n\n      useEffect(() => {\n            getEnergyConsumption(energyId, energyType, setGasConsumption, setElectricityConsumption)\n      }, [energyId, energyType])\n\n      const filterGasByYear = gasConsumption.filter(item => (item.date.substr(6, 4) === filterValue))\n      const filterElectricityByYear = electricityConsumption.filter(item => (item.date.substr(6, 4) === filterValue))\n\n      return (\n            <div className=\"energy-data-div white\">\n                  <YearFilter filterValue={filterValue} setFilterValue={setFilterValue}/>\n                  {energyId === 1 ? // Est ce que l'on est sur la page gaz ?\n                        filterValue !== \"0\" ? \n                              filterGasByYear.map( item => <GasDataLine item={item} />)\n                              : gasConsumption.map( item => <GasDataLine item={item} />)\n                  : \n                        filterValue !== \"0\" ? \n                              filterElectricityByYear.map( item => <ElectricityDataLine item={item} />)\n                              : electricityConsumption.map( item => <ElectricityDataLine item={item} />)\n                  }\n            </div>\n      )\n}\n\nexport default EnergyConsumption;","import React from 'react';\n\nconst EnergyContainer = ({children}: any) => (\n      <div className=\"energy-container\">\n            {children}\n      </div>\n)\n      \nexport default EnergyContainer;","import React from 'react';\n\nconst EnergyToggleButton = ({ showClickedEnergy, setShowClickedEnergy } \n: { showClickedEnergy: boolean, setShowClickedEnergy: React.Dispatch<React.SetStateAction<boolean>> }) => {\n      \n      return (\n            <button className=\"hard-yellow\" onClick={() => setShowClickedEnergy(!showClickedEnergy)}>\n                  {!showClickedEnergy ? 'Voir votre Consommation Électrique' :  'Voir votre Consommation de Gaz'}\n            </button> \n      )\n}\n\nexport default EnergyToggleButton;","export const getEnergyPods = async (\nGAS_ID: number,\nELECTRICITY_ID: number,\nsetEnergyPod: React.Dispatch<React.SetStateAction<{\n      gasPod: string;\n      electricityPod: string;\n  }>>,\n  setEnergyDate: React.Dispatch<React.SetStateAction<{\n      gasDate: string;\n      gasTime: string;\n      electricityDate: string;\n      electricityTime: string;}>>) => {\n\n      const response = await fetch('https://5e9ed3cdfb467500166c47bb.mockapi.io/api/v1/meter/');\n      const data = await response.json();\n\n      const podDatas = {\n            gasPod: data[GAS_ID - 1].pointOfDelivery,\n            electricityPod: data[ELECTRICITY_ID - 1].pointOfDelivery\n      }\n      setEnergyPod(podDatas);\n\n      const metersCreationDate = {\n            gasDate: data[GAS_ID - 1].createdAt.substr(0, 10),\n            gasTime: data[GAS_ID - 1].createdAt.substr(11, 8),\n            electricityDate: data[ELECTRICITY_ID - 1].createdAt.substr(0, 10),\n            electricityTime: data[ELECTRICITY_ID - 1].createdAt.substr(11, 8)\n      }\n      setEnergyDate(metersCreationDate);\n}","import React, { useState, useEffect} from 'react';\nimport './App.css';\nimport MeterDataDisplayer from './components/MeterDataDisplayer';\nimport EnergyConsumption from './components/EnergyConsumption';\nimport EnergyContainer from './components/EnergyContainer';\nimport EnergyToggleButton from './components/EnergyToggleButton';\nimport logo from './images/logo.svg'\nimport { getEnergyPods } from './utils/getEnergyPods'\n\n\nfunction App() {\n\n      const GAS_ID = 1;\n      const ELECTRICITY_ID = 2;\n\n      const [energyPod, setEnergyPod] = useState({\n            gasPod: \"\",\n            electricityPod: \"\"\n      })\n\n      const [energyDate, setEnergyDate] = useState({\n            gasDate: \"\",\n            gasTime: \"\",\n            electricityDate: \"\",\n            electricityTime: \"\"\n      })\n\n      const { gasPod, electricityPod } = energyPod;\n      const { gasDate, gasTime, electricityDate, electricityTime } = energyDate;\n      const [ showClickedEnergy, setShowClickedEnergy ] = useState<boolean>(false);\n      \n\n      useEffect(() => {\n            getEnergyPods(GAS_ID, ELECTRICITY_ID, setEnergyPod, setEnergyDate )\n      }, [])\n      \n      return (\n            <section className=\"app-container\">\n                  <img id=\"logo\"  src={logo} alt=\"logo\"/>\n                  <EnergyContainer>\n                        <MeterDataDisplayer \n                        meterTime={showClickedEnergy? electricityTime : gasTime} \n                        meterDate={showClickedEnergy? electricityDate : gasDate} \n                        energyType={showClickedEnergy? electricityPod : gasPod} \n                        label={showClickedEnergy? \"Electricité\" : \"Gaz\"} />\n                        <EnergyConsumption energyType={showClickedEnergy? \"electricity\" : \"gas\"} energyId={showClickedEnergy? ELECTRICITY_ID : GAS_ID} /> \n                  </EnergyContainer>\n                  <EnergyToggleButton showClickedEnergy={showClickedEnergy} setShowClickedEnergy={setShowClickedEnergy}/>\n            </section>\n      )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}